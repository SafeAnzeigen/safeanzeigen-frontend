import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/router";
import Link from "next/link";
import Head from "next/head";
import { useUser } from "@clerk/clerk-react";
import { format, parseISO } from "date-fns";
import { HomeIcon } from "@heroicons/react/solid";

import Navigation from "../../components/Navigation/Navigation";
import Footer from "../../components/Footer/Footer";

export default function Anzeige() {
  const router = useRouter();
  const { user } = useUser(); /* TODO: IS SIGNED IN CHECK NEEDED? */
  const { aid } = router.query;
  const [carouselIndex, setCarouselIndex] = useState(0);
  const [isfetchingData, setIsfetchingData] = useState(false);
  const [advertisementInfoObject, setAdvertisementInfoObject] = useState({});
  const carouselRef = useRef();
  const [adImages, setAdImages] = useState([]);
  let sliderCounter = 0;

  const retrieveSpecificAdvertisement = (aid) => {
    setIsfetchingData(true);
    fetch(
      `${process.env.NEXT_PUBLIC_BACKEND_URL}` +
        `/advertisements/public/${aid}`,
      {
        method: "get",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
      }
    )
      .then((response) => response.json())
      .then((data) => {
        setIsfetchingData(false);
        console.log("DATA GET SPECIFIC ADVERTISEMENT", data);
        if (data?.advertisement) {
          setAdvertisementInfoObject(data?.advertisement);
          let tempAdImagesArray = [];
          if (data?.advertisement?.article_image_1) {
            tempAdImagesArray.push(data?.advertisement?.article_image_1);
          }
          if (data?.advertisement?.article_image_2) {
            tempAdImagesArray.push(data?.advertisement?.article_image_2);
          }
          if (data?.advertisement?.article_image_3) {
            tempAdImagesArray.push(data?.advertisement?.article_image_3);
          }
          if (data?.advertisement?.article_image_4) {
            tempAdImagesArray.push(data?.advertisement?.article_image_4);
          }
          if (data?.advertisement?.article_image_5) {
            tempAdImagesArray.push(data?.advertisement?.article_image_5);
          }
          setAdImages(tempAdImagesArray);
        }
      })
      .catch((error) => {
        setIsfetchingData(false);
        console.log("ERROR DATA GET SPECIFIC ADVERTISEMENT", error);
      });
  };

  const increaseViewCount = (aid) => {
    fetch(
      `${process.env.NEXT_PUBLIC_BACKEND_URL}` +
        `/advertisements/increaseviewcount/${aid}`,
      {
        method: "get",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
      }
    )
      .then((response) => response.json())
      .then((data) => {
        setIsfetchingData(false);
        console.log("DATA INCREASE VIEWCOUNT", data);
      })
      .catch((error) => {
        setIsfetchingData(false);
        console.log("ERROR DATA INCREASE VIEWCOUNT", error);
      });
  };

  const handleOnPreviousImageClick = () => {
    sliderCounter = (sliderCounter + 1) % adImages.length;
    setCarouselIndex(sliderCounter);
    carouselRef.current.classList.add("carousel-flash-animation");
  };

  const handleOnNextImageClick = () => {
    const adImagesLength = adImages.length;
    sliderCounter = (carouselIndex + adImagesLength - 1) % adImagesLength;
    setCarouselIndex(sliderCounter);
    carouselRef.current.classList.add("carousel-flash-animation");
  };

  const removeAnimation = () => {
    carouselRef.current.classList.remove("carousel-flash-animation");
  };

  useEffect(() => {
    window.onscroll = function () {};
    carouselRef.current.addEventListener("animationend", removeAnimation);
  }, []);

  useEffect(() => {
    if (Object.keys(advertisementInfoObject).length === 0 && aid) {
      retrieveSpecificAdvertisement(aid);
      increaseViewCount(aid);
    }
  }, [aid]);

  const copyToClipboard = async (textToCopy) => {
    await navigator.clipboard.writeText(textToCopy);
    alert("Der Link wurde zum Teilen für dich kopiert.");
  };

  return (
    <div className="h-full bg-gray-50">
      <Head>
        <title>
          Safeanzeigen - Wir bringen Ihre Kleinanzeigen mit Sicherheit groß
          raus!
        </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="theme-color" content="#2f70e9" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="manifest" href="/manifest.webmanifest" />
        <link rel="apple-touch-icon" href="/apple-touch-icon.png"></link>
      </Head>
      {/* Navigation */}
      <Navigation />
      <div className="min-h-screen bg-gray-50">
        {!isfetchingData && (
          <div className="px-4 py-12 mx-auto max-w-7xl sm:py-16 sm:px-6 lg:px-8">
            <div className="mx-auto max-w-screen">
              <div className="flex mb-4" aria-label="Breadcrumb">
                <ol
                  role="list"
                  className="flex px-6 space-x-4 bg-white rounded-md shadow"
                >
                  <li className="flex">
                    <div className="flex items-center">
                      <Link href="/">
                        <HomeIcon
                          className="flex-shrink-0 w-5 h-5 text-gray-400 cursor-pointer hover:text-orange-500"
                          aria-hidden="true"
                        />
                      </Link>
                      <span className="sr-only">Home</span>
                    </div>
                  </li>
                  {advertisementInfoObject?.category_name && (
                    <li className="flex">
                      <div className="flex items-center">
                        <svg
                          className="flex-shrink-0 w-6 h-full text-gray-200"
                          viewBox="0 0 24 44"
                          preserveAspectRatio="none"
                          fill="currentColor"
                          xmlns="http://www.w3.org/2000/svg"
                          aria-hidden="true"
                        >
                          <path d="M.293 0l22 22-22 22h1.414l22-22-22-22H.293z" />
                        </svg>
                        <a
                          href={`/suche/${advertisementInfoObject?.category_name}`}
                          className="ml-4 text-sm font-medium text-gray-500 hover:text-orange-500"
                        >
                          {advertisementInfoObject?.category_name}
                        </a>
                      </div>
                    </li>
                  )}
                  {advertisementInfoObject?.subcategory_name && (
                    <li className="flex">
                      <div className="flex items-center">
                        <svg
                          className="flex-shrink-0 w-6 h-full text-gray-200"
                          viewBox="0 0 24 44"
                          preserveAspectRatio="none"
                          fill="currentColor"
                          xmlns="http://www.w3.org/2000/svg"
                          aria-hidden="true"
                        >
                          <path d="M.293 0l22 22-22 22h1.414l22-22-22-22H.293z" />
                        </svg>
                        <a
                          href={`/suche/${advertisementInfoObject?.subcategory_name}`}
                          className="ml-4 text-sm font-medium text-gray-500 hover:text-orange-500"
                        >
                          {advertisementInfoObject?.subcategory_name}
                        </a>
                      </div>
                    </li>
                  )}
                </ol>
              </div>
              <div className="grid gap-12 lg:grid-cols-2 lg:gap-0">
                <div>
                  <div ref={carouselRef} className="relative select-none">
                    {/* <div className="aspect-w-16 aspect-h-9"> */}
                    <img
                      src={adImages[carouselIndex]}
                      alt=""
                      layout="fill"
                      style={{
                        objectFit: "cover",
                        height: "800px",
                        width: "800px",
                      }}
                      className="rounded-xl"
                    />

                    <div className="absolute flex items-center justify-between w-full px-3 transform -translate-y-1/2 top-1/2">
                      <button onClick={() => handleOnPreviousImageClick()}>
                        <div className="p-2 bg-orange-400 rounded-full hover:bg-orange-500">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            className="w-6 h-6 text-white"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                            strokeWidth={2}
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              d="M10 19l-7-7m0 0l7-7m-7 7h18"
                            />
                          </svg>
                        </div>
                      </button>
                      <button onClick={() => handleOnNextImageClick()}>
                        <div className="p-2 bg-orange-400 rounded-full hover:bg-orange-500">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            className="w-6 h-6 text-white"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                            strokeWidth={2}
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              d="M14 5l7 7m0 0l-7 7m7-7H3"
                            />
                          </svg>
                        </div>
                      </button>
                    </div>
                  </div>
                  <div className="flex justify-end">
                    <div className="flex p-2">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="w-6 h-6 text-orange-500"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        strokeWidth={2}
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                        />
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                        />
                      </svg>
                      <span className="mx-2 text-gray-900">
                        {advertisementInfoObject?.view_count}
                      </span>
                    </div>
                    <div className="flex p-2">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="w-6 h-6 text-orange-500"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        strokeWidth={2}
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                        />
                      </svg>
                      <span className="mx-2 text-gray-900">
                        {advertisementInfoObject?.favorite_count}
                      </span>
                    </div>
                  </div>
                  <div>
                    <h2 className="mt-2 text-3xl font-bold text-center text-orange-500 break-words sm:text-4xl">
                      {advertisementInfoObject?.title}
                    </h2>
                    <div className="px-6 text-center bg-gray-50 lg:flex-shrink-0 lg:flex lg:flex-col lg:justify-center">
                      <div className="flex items-center justify-center mt-2 text-5xl font-extrabold text-gray-900">
                        <span className="mt-1 mr-3 text-xl font-medium text-gray-500">
                          {advertisementInfoObject?.price_type}
                        </span>
                        <span className="text-3xl">
                          {advertisementInfoObject?.price},00
                        </span>
                        <span className="mt-1 ml-3 text-xl font-medium text-gray-500">
                          EURO
                        </span>
                      </div>
                      <div className="mt-6">
                        {user &&
                        user?.id &&
                        aid &&
                        user?.id === advertisementInfoObject?.clerk_user_id ? (
                          <Link href={`/editieren/${aid}`}>
                            <div className="rounded-md shadow">
                              <div
                                href="#"
                                className="cursor-pointer flex items-center justify-center px-5 py-3 text-base font-medium text-white bg-[#2f70e9] border border-transparent rounded-md hover:bg-[#2962cd]"
                              >
                                Anzeige Editieren
                              </div>
                            </div>
                          </Link>
                        ) : (
                          <div className="rounded-md shadow">
                            <a
                              href="#"
                              className="flex items-center justify-center px-5 py-3 text-base font-medium text-white bg-[#2f70e9] border border-transparent rounded-md hover:bg-[#2962cd]"
                            >
                              Kontakt aufnehmen
                            </a>
                          </div>
                        )}
                        {user &&
                        user?.id &&
                        aid &&
                        user?.id === advertisementInfoObject?.clerk_user_id ? (
                          ""
                        ) : (
                          <div className="mt-4 rounded-md shadow">
                            <a
                              href="#"
                              className="flex items-center justify-center px-5 py-3 text-base font-medium text-gray-700 bg-white border-gray-300 rounded-md hover:bg-gray-200"
                            >
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                className="w-6 h-6 mr-2"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                                strokeWidth={2}
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                                />
                              </svg>
                              Favorisieren / Entfavorisieren
                            </a>
                          </div>
                        )}

                        <div className="mt-4 rounded-md shadow ">
                          <span
                            onClick={() => {
                              typeof window !== "undefined"
                                ? copyToClipboard(window.location)
                                : "";
                            }}
                            className="flex items-center justify-center px-5 py-3 text-base font-medium text-gray-700 bg-white border-gray-300 rounded-md cursor-pointer hover:bg-gray-200"
                          >
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="w-6 h-6 mr-2"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                              strokeWidth={2}
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"
                              />
                            </svg>
                            Teilen
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="overflow-hidden bg-white sm:rounded-lg lg:ml-10">
                  <div className="px-4 py-5 sm:px-6">
                    <h3 className="text-lg font-medium leading-6 text-orange-500">
                      Anbieter
                    </h3>
                    <p className="max-w-2xl mt-1 text-sm text-gray-500">
                      Informationen zum Anbieter
                    </p>
                  </div>
                  <div className="px-4 py-5 border-t border-gray-200 sm:p-0">
                    <dl className="sm:divide-y sm:divide-gray-200">
                      <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                        <dt className="text-sm font-medium text-gray-500">
                          Identicon
                        </dt>
                        <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                          <img
                            className="w-10 h-10 rounded-full"
                            src={advertisementInfoObject?.user_photo}
                            alt="Benutzeridentifizierender Avatar"
                          />
                        </dd>
                      </div>
                      <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                        <dt className="text-sm font-medium text-gray-500">
                          Name
                        </dt>
                        <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                          {advertisementInfoObject?.fullname}
                        </dd>
                      </div>
                      <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                        <dt className="text-sm font-medium text-gray-500">
                          Mitglied seit
                        </dt>
                        <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                          {advertisementInfoObject?.register_date &&
                            format(
                              parseISO(advertisementInfoObject?.register_date),
                              "dd.MM.yyyy"
                            )}
                        </dd>
                      </div>
                      <div className="px-4 py-5 sm:px-6">
                        <h3 className="text-lg font-medium leading-6 text-orange-500">
                          Anzeige
                        </h3>
                        <p className="max-w-2xl mt-1 text-sm text-gray-500">
                          Informationen zur Anzeige
                        </p>
                      </div>
                      <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                        <dt className="text-sm font-medium text-gray-500">
                          Veröffentlicht
                        </dt>
                        <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                          {advertisementInfoObject?.created_at &&
                            format(
                              parseISO(advertisementInfoObject?.created_at),
                              "dd.MM.yyyy"
                            )}
                        </dd>
                      </div>
                      <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                        <dt className="text-sm font-medium text-gray-500">
                          Telefonnummer
                        </dt>
                        <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                          {advertisementInfoObject?.phone_number}
                        </dd>
                      </div>
                      <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                        <dt className="text-sm font-medium text-gray-500">
                          Adresse
                        </dt>
                        <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                          {advertisementInfoObject?.location_street}
                        </dd>
                      </div>
                      <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                        <dt className="text-sm font-medium text-gray-500">
                          Anzeigen-ID
                        </dt>
                        <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                          {advertisementInfoObject?.advertisement_id}
                        </dd>
                      </div>
                      <div className="h-full px-4 py-5 sm:px-6">
                        <h3 className="text-lg font-medium leading-6 text-orange-500">
                          Beschreibung
                        </h3>
                        <div className="grow-wrap">
                          <textarea
                            readOnly
                            autoresizeenabled={true}
                            spellCheck="false"
                            name="comment"
                            id="comment"
                            className="block w-full mt-1 font-semibold text-gray-700 rounded-md cursor-default resize-none sm:text-sm focus:border-gray-700 focus:ring-0 h-96"
                            value={advertisementInfoObject?.description}
                          />
                        </div>
                      </div>
                    </dl>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      <Footer />
    </div>
  );
}
